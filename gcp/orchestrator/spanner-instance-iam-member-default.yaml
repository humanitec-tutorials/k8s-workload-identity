# This Resource Definition uses the Terraform Driver to create IAM policy for spanner-instance resources of the class "default"
# In this scenario, each workload gets its own Spanner instance and permission to manage its own databases inside it.
apiVersion: entity.humanitec.io/v1b1
kind: Definition
metadata:
  id: spanner-instance-iam-member-default
entity:
  driver_type: humanitec/terraform
  name: spanner-instance
  type: gcp-iam-policy-binding
  # Obtain the Cloud Account from a config resource
  driver_account: ${resources['config.default#app-config'].account}
  driver_inputs:
    values:
      variables:
        project_id: ${resources['config.default#app-config'].outputs.project_id}
        # Obtain the spanner-instance name from the bucket resource this resource depends on.
        spanner_instance_name: ${resources['spanner-instance.default'].outputs.instance}
        # This resource selector traverses the Graph via spanner-instance and workload to read the principal output from all k8s-service-account resources
        principal: ${resources['spanner-instance.default<workload>k8s-service-account'].outputs.principal}
      credentials_config:
        variables:
          access_token: access_token
      files:
        providers.tf: |
          terraform {
            required_providers {
              google = {
                source  = "hashicorp/google"
              }
            }
          }
        variables.tf: |
          variable "access_token" {
            type      = string
            sensitive = true
          }
          variable "project_id" {}
          variable "spanner_instance_name" {}

          # This variable is a set because a resource selector, which is used
          # to retrieve it, always returns an array
          variable "principal" {
            type = set(string)
          }
        main.tf: |
          provider "google" {
            access_token = var.access_token
          }

          # Create one IAM member for each principal 
          resource "google_spanner_instance_iam_member" "iam_member" {
            for_each = var.principal

            project  = var.project_id
            instance = var.spanner_instance_name
            role     = "roles/spanner.databaseAdmin"
            member   = each.key
          }
        outputs.tf: |
          output "principal" {
            value = join(",", var.principal)
          }   
  # Match the class that is used in the "provision" statement in the spanner-instance Resource Definition
  criteria:
    - class: spanner-instance-default