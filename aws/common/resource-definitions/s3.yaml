# This Resource Definition of type `s3` uses the Terraform Runner Driver to provision an Amazon S3 bucket
apiVersion: entity.humanitec.io/v1b1
kind: Definition
metadata:
  id: wi-aws-s3
entity:
  driver_type: humanitec/terraform-runner
  name: wi-aws-s3
  type: s3
  # The identity used in this Cloud Account is the one executing the Terraform code
  # It needs permissions to manage S3 buckets
  driver_account: ${resources['config.default#app-config'].account}
  driver_inputs:
    values:
      append_logs_to_error: true
      variables:
        app_id: "${context.app.id}"
        env_id: "${context.env.id}"
        res_id: "${context.res.id}"
        region: ${resources['config.default#app-config'].outputs.region}
      credentials_config:
        environment:
          AWS_ACCESS_KEY_ID: AccessKeyId
          AWS_SECRET_ACCESS_KEY: SecretAccessKey
          AWS_SESSION_TOKEN: SessionToken
      files:
        providers.tf: |
          terraform {
            required_providers {
              aws = {
                source  = "hashicorp/aws"
              }
              random = {
                source  = "hashicorp/random"
              }
            }
          }
        variables.tf: |
          locals {
            workload_id = split(".", var.res_id)[1]
          }
          variable "app_id" {}
          variable "env_id" {}
          variable "res_id" {}
          variable "region" {}
        main.tf: |
          # Provider credentials are being injected through environment variables
          provider "aws" {
            region = var.region
            default_tags {
              tags = {
                humanitec  = "true"
                hum-app    = var.app_id
                hum-env    = var.env_id
                hum-res    = replace(var.res_id, ".", "-")
                managed-by = "terraform"
              }
            }
          }
          resource "random_string" "bucket_name" {
            length  = 10
            special = false
            lower   = true
            upper   = false
          }
          resource "aws_s3_bucket" "bucket" {
            bucket        = random_string.bucket_name.result
            force_destroy = true
          }
        outputs.tf: |
          output "arn" {
            value = aws_s3_bucket.bucket.arn
          }
          output "bucket" {
            value = aws_s3_bucket.bucket.bucket
          }
          output "region" {
            value = aws_s3_bucket.bucket.region
          }
  provision:
    # Co-provision an IAM Policy resource of class "s3-bucket-policy"
    # By not specifying an ID, the co-provisioned aws-policy will have the same ID as the present resource
    aws-policy.s3-bucket-policy:
      is_dependent: true
  # Adjust matching criteria as required
  criteria:
  - app_id: workload-identity-test-aws